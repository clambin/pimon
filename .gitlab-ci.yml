stages:
  - test
  - build
  - smoke
  - release

# Don't run for new tags
workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

.test_only:
  rules:
    - changes:
        - "*.py"
        - "pimon/*.py"
        - "tests/*.py"
        - .gitlab-ci.yml

.build_only:
  rules:
    - changes:
        - "*.py"
        - "pimon/*.py"
        - "Dockerfile*"
        - .gitlab-ci.yml

.docker:
  image: docker:stable
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CERT_PATH: "/certs/client"
    DOCKER_CLI_EXPERIMENTAL: enabled
  tags:
    - docker
    - shared
  before_script:
    - export VERSION=$(grep -i ^version pimon/version.py | awk '{ print $3 }' | tr -d \');
    - if [[ $CI_COMMIT_REF_NAME == "master" ]]; then
         export TAG=$VERSION;
      elif [[ $CI_COMMIT_REF_NAME == "release-$VERSION" ]]; then
         export TAG="dev-$VERSION";
      else
         export TAG="dev";
      fi
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr "[:upper:]" "[:lower:]")

.docker_arm:
  extends: .docker
  tags:
    - docker
    - arm
    - rpi

flake8:
  stage: test
  extends: .test_only
  image: python:3.7
  before_script:
    - pip install pipenv
    - pipenv install --dev
  script:
    - pipenv run flake8 --max-line-length 120 *.py pimon/*.py

pytest:
  stage: test
  extends: .test_only
  image: python:3.7
  variables:
    # workaround for https://github.com/pypa/pipenv/issues/4188
    PIPENV_PYUP_API_KEY: ""
  before_script:
    - pip install pipenv
    - pipenv install --dev
  script:
    - pipenv check
    - cd tests && pipenv run pytest --cov --junitxml=report.xml
    - pipenv run bash <(curl -s https://codecov.io/bash) -s tests
  artifacts:
    reports:
      junit: tests/report.xml

prometheus:
  stage: test
  extends: .test_only
  image: python:3.7
  before_script:
    - pip install pipenv
    - pipenv install
  script:
    - pipenv run python pimon.py --port 8080 --stub --debug --interval 1 &
    - TESTPID=$!
    - sleep 5
    - curl -s localhost:8080/metric | grep '^pimon_clockspeed '
    - curl -s localhost:8080/metric | grep '^pimon_temperature '
    - kill $TESTPID

build_arm:
  stage: build
  extends:
    - .docker
    - .build_only
  script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - docker pull "$CI_PROJECT_PATH":"$TAG" && CACHE="--cache-from $CI_PROJECT_PATH:$TAG"
    - docker build $CACHE --pull -t "$CI_PROJECT_PATH":"$TAG" .
    - docker push "$CI_PROJECT_PATH":"$TAG"

test_arm:
  stage : smoke
  extends:
    - .docker_arm
    - .build_only
  script:
    - docker run -v $(pwd)/tests:/app/tests "$CI_PROJECT_PATH":"$TAG" --once --stub --debug --monitor-fan=False

publish:
  stage: release
  extends: .docker
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  script:
    - docker pull "$CI_PROJECT_PATH":"$TAG"
    - docker tag "$CI_PROJECT_PATH":"$TAG"  "$CI_PROJECT_PATH":latest
    - docker push "$CI_PROJECT_PATH":latest

github:
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  before_script:
    - export VERSION=$(grep -i ^version pimon/version.py | awk '{ print $3 }' | tr -d \');
  script:
    - git remote set-url origin "https://$GITHUB_USER:$GITHUB_TOKEN@github.com/$CI_PROJECT_PATH.git"
    - git tag $VERSION
    - git push --tags